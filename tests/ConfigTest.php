<?php

namespace pachel\Light\Tests;

use Pachel\Light\src\Config;
use PHPUnit\Framework\TestCase;

class ConfigTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

    }

    /**
     * @covers \Pachel\Light\src\Config::checkConfig
     * @return void
     */
    public function testNoMinimal()
    {
        $config = [
            "url" => "asd"
        ];
        $this->expectException(\Exception::class);
        $this->expectExceptionCode(1001);
        $t = new Config($config);
    }
    /**
     * @covers \Pachel\Light\src\Config::dirExists
     * @return void
     */
    public function testNotExists(){
        $config = [
            "ui" => "asd",
            "url"=> "55"
        ];
        $this->expectException(\Exception::class);
        $this->expectExceptionCode(1002);
        $t = new Config($config);
    }
    /**
     * @covers \Pachel\Light\src\Config::checkConfig
     * @return void
     */

    public function testConfigStoresValuesCorrectly()
    {
        $config = [
            "ui" => __DIR__."/../example",
            "url" => " dasjdh lakjsdh lkajh",
            "sajat" => " dasjdh lakjsdh lkajh",
        ];
        $t = new Config($config);
        $this->assertEquals($config["sajat"], $t->get("sajat"), "Nem menti el a configba a változókat");
    }

    /**
     * @covers \Pachel\Light\src\Config::checkSlash
     * @return void
     */
    public function testCheckSlash(){
        $config = [
            "ui" => __DIR__."/../example",
            "url" => " dasjdh lakjsdh lkajh"
        ];
        $t = new Config($config);
        $this->assertEquals($config["ui"]."/",$t->get("ui"),"A / jel nem lett betéve");
        $this->assertEquals($config["url"]."/",$t->get("url"),"A / jel nem lett betéve");

    }

}